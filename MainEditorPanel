import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

public class ImageEditorPanel extends JPanel implements KeyListener, MouseListener {

  Color[][] pixels;
  boolean quit = false;

  public ImageEditorPanel() {
    BufferedImage imageIn = null;
    try {
      // the image should be in the main project folder, not in \src or \bin
      imageIn = ImageIO.read(new File("turtle.jpg"));
    } catch (IOException e) {
      System.out.println(e);
      System.exit(1);
    }
    pixels = makeColorArray(imageIn);
    setPreferredSize(new Dimension(pixels[0].length, pixels.length));
    setBackground(Color.BLACK);
  }

  public void paintComponent(Graphics g) {
    // paints the array pixels onto the screen
    for (int row = 0; row < pixels.length; row++) {
      for (int col = 0; col < pixels[0].length; col++) {
        g.setColor(pixels[row][col]);
        g.fillRect(col, row, 1, 1);
      }
    }
  }

  public void run(){
    while(!quit){
    
    repaint();
  }
  }

  public Color[][] flipHorizontal(Color[][] oldArr){
    Color[][] newArr = new Color[oldArr.length][oldArr[0].length];
    for ( int r = 0; r < oldArr.length;r++) {
      for (int c = 0; c < oldArr[0].length; c++) {
        newArr[r][c] = oldArr[r][oldArr.length - 1 - c];
      }
    }
    return newArr;
  }

  public Color[][] flipVertical(Color[][] oldArr){
    Color[][] newArr = new Color[oldArr.length][oldArr[0].length];
    for ( int r = 0; r < oldArr.length;r++) {
      for (int c = 0; c < oldArr[0].length; c++) {
        newArr[r][c] = oldArr[oldArr.length - 1 - r][c];
      }
    }
    return newArr;
  }

  public Color[][] grayScale(Color[][] oldArr){
    Color[][] newArr = new Color[oldArr.length][oldArr[0].length];
    for (int r = 0; r < oldArr.length; r++) {
      for (int c = 0; c < oldArr[0].length; c++) {
        Color tempColor = oldArr[r][c];
        int red = tempColor.getRed();
        int blue = tempColor.getBlue();
        int green = tempColor.getGreen();
        int gray = (int)(0.6 * blue + 0.3 * green + 0.1 * red);
        newArr[r][c] = new Color(gray, gray, gray);
      }  
    }
    return newArr;
  }

  public static Color[][] blurImage(Color[][] oldArr) {
        int width = oldArr.length;
        int height = oldArr[0].length;
        Color[][] newArr = new Color[oldArr.length][oldArr[0].length];
        

        int radius = 3; // Adjust this radius as needed

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int[] avgRGB = calculateAverageRGB(oldArr, x, y, radius);
                newArr[y][x] = new Color (avgRGB[0], avgRGB[1], avgRGB[2]);
            }
        }

        return newArr;
    }

    private static int[] calculateAverageRGB(Color[][] oldArr, int centerX, int centerY, int radius) {
        int totalPixels = 0;
        int totalR = 0, totalG = 0, totalB = 0;

        for (int dy = -radius; dy <= radius; dy++) {
            for (int dx = -radius; dx <= radius; dx++) {
                int x = Math.min(Math.max(centerX + dx, 0), oldArr.length - 1);
                int y = Math.min(Math.max(centerY + dy, 0), oldArr[0].length - 1);
                Color tempColor = oldArr[y][x];
                totalR += tempColor.getRed();
                totalG += tempColor.getGreen();
                totalB += tempColor.getBlue();
                totalPixels++;
            }
        }

        int avgR = totalR / totalPixels;
        int avgG = totalG / totalPixels;
        int avgB = totalB / totalPixels;

        return new int[]{avgR, avgG, avgB};
    }

    public Color[][] tvStatic(Color[][] oldArr){

    Color[][] newArr = new Color[oldArr.length][oldArr[0].length];
    for (int r = 0; r < oldArr.length; r++) {
      for (int c = 0; c < oldArr[0].length; c++) {
        Color tempColor = oldArr[r][c];
        int red = tempColor.getRed();
        int blue = tempColor.getBlue();
        int green = tempColor.getGreen();

        int newRed = 0;
        if(red < 128){
          newRed = (int)(red * 0.6);
        }else{
          newRed = (int)(200);
        }

        int newBlue = 0;
        if(blue < 128){
          newBlue = (int)(blue * 0.6);
        }else{
          newBlue = (int)(200);
        }

        int newGreen = 0;
        if(green < 128){
          newGreen = (int)(green * 0.6);
        }else{
          newGreen = (int)(200);
        }
        newArr[r][c] = new Color(newRed, newGreen, newBlue);
      }  
    }
    return newArr;
  }


  

  



  public Color[][] makeColorArray(BufferedImage image) {
    int width = image.getWidth();
    int height = image.getHeight();
    Color[][] result = new Color[height][width];

    for (int row = 0; row < height; row++) {
      for (int col = 0; col < width; col++) {
        Color c = new Color(image.getRGB(col, row), true);
        result[row][col] = c;
      }
    }
    return result;
  }

  public void keyPressed(KeyEvent e) {
  if (e.getKeyCode() == KeyEvent.VK_LEFT) {
  if (e.getKeyChar() == 'k'){
    flipVertical(pixels);
  }
  if (e.getKeyChar() == 'l'){
    flipHorizontal(pixels);
  }
  if (e.getKeyChar() == 'm'){
    grayScale(pixels);
  }
  if (e.getKeyChar() == 'n'){
    tvStatic(pixels);
  }
  if (e.getKeyChar() == 'o'){
    blurImage(pixels);
  }
  }
}

  public void keyReleased(KeyEvent e) {
  if (e.getKeyCode() == KeyEvent.VK_LEFT) {

    }
  }
  public void keyTyped(KeyEvent e) {
    
  }

  public void mouseClicked(MouseEvent e) {

  }
  public void mouseEntered(MouseEvent e) {

  }
  public void mouseExited(MouseEvent e) {

  }
  public void mousePressed(MouseEvent e) {
  int pressX = e.getX();
  int pressY = e.getY();

  }
  public void mouseReleased(MouseEvent e) {
  int releaseX = e.getX();
  int releaseY = e.getY();

  }
  }
